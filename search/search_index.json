{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Project is in early development.</p> <p>This project is in early development and is not yet ready for production use. You are welcome to try it out and provide feedback, but be aware that the API may change at any time.</p> <p>kube-image-updater (A.K.A. kimup, which is pronounced /kim up/) is a tool that helps you to update the image of a Kubernetes Deployment, StatefulSet, DaemonSet, or CronJob. It can be used to update the image of a single resource or multiple resources at once.</p> <p>kimup is designed to be simple to use and easy to deploy. It is an kubernetes operator with custom resource definition (CRD) that allows you to define the image update strategy and schedule.</p> <p>The project is composed of 2 main components:</p> <ul> <li>kimup-operator: The main component that reconcile <code>Image</code>,<code>AlertConfig</code> and <code>Kimup</code> CRD and serve the MutatingWebhook.</li> <li>kimup-controller: The component that updates TAG of the <code>Image</code> resource.</li> </ul> <p>Basic example of usage:</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\n  namespace: default\nspec:\n  image: traefik/whoami\n  baseTag: v1.9.0\n  triggers:\n    - type: crontab\n      value: \"00 00 */12 * * *\"\n  rules:\n    - name: Automatic update semver minor\n      type: semver-minor\n      actions:\n        - type: apply\n</code></pre> <p>The <code>Image</code> resource defines the image to update, the base tag, the triggers, and the rules. In this example, the image <code>traefik/whoami</code> will be updated every 12 hours with the latest minor version.</p> <p>It is structured around the following concepts:</p> <ul> <li>Triggers: define when the image should be updated. (Multiple triggers can be defined)</li> <li>Rules: define how the image should be updated. (Multiple rules can be defined)</li> <li>Actions: define what should be done after the image is updated (rule matched). (Multiple actions can be defined)</li> </ul>"},{"location":"actions/apply/","title":"Apply","text":"<p>The <code>apply</code> action update the new image tag to the resource.</p>"},{"location":"actions/apply/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>apply</code> action.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Automatic apply on dev version\n      type: regex\n      # Match v1.2.3-dev1 version\n      value: \"^v?[0-9].[0-9].[0-9]-dev[0-9]$\" # (1)\n      actions:\n        - type: apply\n</code></pre> <p>In this example, the <code>apply</code> action will be executed when the image is updated with a new version that matches the regular expression <code>^v?[0-9].[0-9].[0-9]-dev[0-9]$</code>.</p>"},{"location":"actions/alerts/discord/","title":"Discord Alert","text":"<p>The <code>discord</code> alert allows you to send a message to a Discord channel when an image is updated.</p>"},{"location":"actions/alerts/discord/#who-to-use","title":"Who to use","text":"<p>Require AlertConfig</p> <p>The <code>discord</code> alert requires an <code>AlertConfig</code> resource to be created.</p> <p>Create an <code>AlertConfig</code> resource with the <code>discord</code> alert.</p>"},{"location":"actions/alerts/discord/#setting","title":"Setting","text":"<p>The CRD schema for the <code>AlertConfig</code> resource is available on doc.crds.dev</p>"},{"location":"actions/alerts/discord/#examples","title":"Examples","text":"<p>1 - Create kubernetes secret</p> <pre><code>kubectl create secret generic discord-secret --from-literal=webhookURL=https://discord.com/api/webhooks/1234567890/ABCDEFGHIJKLMN --dry-run=client -o yaml &gt; discord-secret.yaml\n\nkubectl apply -f discord-secret.yaml\n</code></pre> <p>2 - Create AlertConfig</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: AlertConfig\nmetadata:\n  name: demo\nspec:\n  discord:\n    webhookURL: # (1)\n      valueFrom: # (2)\n        secretKeyRef:\n          name: discord-secret\n          key: webhookURL\n    templateBody: | # (3)\n      New dev version {{ .NewTag }} is available for {{ .ImageName }}.\n</code></pre> <ol> <li>The <code>webhookURL</code> is the URL of the Discord webhook. How to create a Discord webhook</li> <li>The <code>valueFrom</code> field allows you to reference a secret key. The <code>discord-secret</code> secret must be created with a <code>webhookURL</code> key.</li> <li>The <code>templateBody</code> field is the custom message. For more information about the template, you can check the template documentation.</li> </ol> <p>3 - Create Image</p> <p>In this example, if a dev version is detected, an alert will be sent to the Discord channel and the new image tag will be applied.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Automatic apply on dev version\n      type: regex\n      # Match v1.2.3-dev1 version\n      value: \"^v?[0-9].[0-9].[0-9]-dev[0-9]$\"\n      actions:\n        - type: alert-discord\n          data:\n            valueFrom:\n              alertConfigRef: # (1)\n                name: demo\n        - type: apply\n</code></pre> <ol> <li>The <code>alertConfigRef</code> field allows you to reference the <code>AlertConfig</code> resource in the same namespace.</li> </ol>"},{"location":"actions/alerts/discord/#fields","title":"Fields","text":"<p>See the list of fields available for the <code>discord</code> alert on doc.crds.dev</p>"},{"location":"actions/alerts/email/","title":"Email Alert","text":"<p>The <code>email</code> alert allows you to send an email when an image is updated.</p>"},{"location":"actions/alerts/email/#who-to-use","title":"Who to use","text":"<p>Require AlertConfig</p> <p>The <code>email</code> alert requires an <code>AlertConfig</code> resource to be created.</p> <p>Create an <code>AlertConfig</code> resource with the <code>email</code> alert.</p>"},{"location":"actions/alerts/email/#setting","title":"Setting","text":"<p>The CRD schema for the <code>AlertConfig</code> resource is available on doc.crds.dev</p> <p>1 - Create kubernetes secret</p> <pre><code>kubectl create secret generic email-secret \\\n    --from-literal=smtpHost=smtp.example.com\\\n    --from-literal=smtpPort=587 \\\n    --from-literal=smtpUsername=foo \\\n    --from-literal=smtpPassword=bar \\\n    --dry-run=client -o yaml &gt; email-secret.yaml\n\nkubectl apply -f email-secret.yaml\n</code></pre> <p>2 - Create AlertConfig</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: AlertConfig\nmetadata:\n  name: demo\nspec:\n    email:\n        host: # Required (1)\n          valueFrom:\n            secretKeyRef:\n            name: email-secret\n            key: smtpHost\n        port: # Optionnal (2)\n          valueFrom:\n            secretKeyRef:\n            name: email-secret\n            key: smtpPort\n        username: # Optionnal (3)\n          valueFrom:\n            secretKeyRef:\n            name: email-secret\n            key: smtpUsername\n        password: # Optionnal (4)\n          valueFrom:\n            secretKeyRef:\n            name: email-secret\n            key: smtpPassword\n        fromAddress: noreply@bar.com\n        toAddress: # Required (5)\n          - foo@bar.com\n          - bar@foo.com\n        templateBody: |\n          New dev version {{ .NewTag }} is available for {{ .ImageName }}.\n        templateSubject: |\n          New version available for {{ .ImageName }}\n</code></pre> <ol> <li>The <code>host</code> is the SMTP server host.</li> <li>The <code>port</code> is the SMTP server port. Default value is <code>25</code>.</li> <li>The <code>username</code> is the SMTP server username.</li> <li>The <code>password</code> is the SMTP server password.</li> <li>The <code>toAddress</code> is the list of email addresses to send the alert.</li> </ol> <p>3 - Create Image</p> <p>In this example, if a dev version is detected, an alert will be sent to the email address and the new image tag will be applied.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Automatic apply on dev version\n      type: regex\n      # Match v1.2.3-dev1 version\n      value: \"^v?[0-9].[0-9].[0-9]-dev[0-9]$\"\n      actions:\n        - type: alert-email\n          data:\n            valueFrom:\n              alertConfigRef: # (1)\n                name: demo\n        - type: apply\n</code></pre> <ol> <li>The <code>alertConfigRef</code> field allows you to reference the <code>AlertConfig</code> resource in the same namespace.</li> </ol>"},{"location":"actions/alerts/email/#fields","title":"Fields","text":"<p>See the list of fields available for the <code>email</code> alert in the doc.crds.dev</p>"},{"location":"actions/alerts/getting-start/","title":"Getting started Alert","text":"<p>Kimup provide multiple actions to alert you when an image is updated.</p> <p>new actions are coming soon</p> <p>We are working on new actions to alert you when an image is updated. Stay tuned! Github issue</p> <p>List of available alerts :</p> <ul> <li>Discord</li> <li>Email</li> <li>Slack (coming soon)</li> <li>Webhook (coming soon)</li> </ul>"},{"location":"actions/alerts/getting-start/#advanced-usage","title":"Advanced usage","text":""},{"location":"actions/alerts/getting-start/#template-body-alert-message","title":"Template body alert message","text":"<p>Alert have a custom body template to customize the message sent.</p> <p>The template is a Go template with the following variables:</p> Variable Description Type Example <code>.Namespace</code> The namespace of the resource string <code>default</code> <code>.Name</code> The name of the resource string <code>demo</code> <code>.ImageName</code> The image name string <code>ghcr.io/orange-cloudavenue/kimup-controller</code> <code>.BaseTag</code> The base tag string <code>v0.0.19</code> <code>.NewTag</code> The new tag string <code>v0.0.22</code> <code>.ActualTag</code> The actual tag string <code>v0.0.21</code> <code>.AvailableTags</code> The available tags slice <code>v0.0.19, v0.0.20, v0.0.21, v0.0.22</code> <p>Default template body alert message</p> <pre><code>    Kimup alert for image update:\n    {{ .Namespace }}/{{ .Name }}\n\n    Image **{{ .ImageName }}:{{ .ActualTag }}** has a new tag available: **{{ .NewTag }}**\n\n    Available tags:\n{{ range .AvailableTags -}}\n    - {{ . }}\n{{ end }}\n</code></pre>"},{"location":"advanced/failurepolicy/","title":"Failure Policy","text":""},{"location":"advanced/failurepolicy/#overview","title":"Overview","text":"<p>Kimup operator allows you to manage the behavior of the operator when it fails to apply the tag on a pod. The failure policy is defined by the annotation <code>kimup.cloudavenue.io/failure-policy</code> on the namespace or the pod. The failure policy can be set to <code>fail</code> or <code>ignore</code>. The default value is <code>fail</code>.</p> <p>Warning</p> <p>The annotation <code>kimup.cloudavenue.io/enabled</code> must be set to <code>true</code> on the namespace or the pod to apply the failure policy. If the annotation is not set, the failure policy will be ignored. See Scope for more information.</p>"},{"location":"advanced/failurepolicy/#logical","title":"Logical","text":""},{"location":"advanced/failurepolicy/#apply-the-failure-policy","title":"Apply the failure policy","text":"<p>When the annotation <code>kimup.cloudavenue.io/failure-policy: \"fail\"</code> is set on a namespace, the operator will fail if it can't apply the tag on a pod created in this namespace.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n    kimup.cloudavenue.io/failure-policy: \"fail\"\n</code></pre> <p>When the annotation <code>kimup.cloudavenue.io/failure-policy: \"ignore\"</code> is set on a namespace, the operator will ignore the failure if it can't apply the tag on a pod created in this namespace.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n    kimup.cloudavenue.io/failure-policy: \"ignore\"\n</code></pre> <p>For a pod, the same logic applies.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: your-pod\n  namespace: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n    kimup.cloudavenue.io/failure-policy: \"fail\"\n</code></pre>"},{"location":"advanced/failurepolicy/#override-the-failure-policy-for-a-pod","title":"Override the failure policy for a pod","text":"<p>When the annotation <code>kimup.cloudavenue.io/failure-policy</code> is set on a namespace, the operator will apply the failure policy on all pods created in this namespace. If the annotation is set on a pod, the operator will apply the failure policy defined on the pod, but i will be necessary to set the annotation <code>kimup.cloudavenue.io/enabled</code> to <code>true</code> on the pod.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n    kimup.cloudavenue.io/failure-policy: \"fail\"\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: your-pod\n  namespace: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n    kimup.cloudavenue.io/failure-policy: \"ignore\"\n</code></pre>"},{"location":"advanced/metrics/","title":"Metrics","text":"<p>kimup exposes metrics to monitor the performance. The metrics are exposed in the Prometheus format and can be scraped by Prometheus or any other monitoring tool that can scrape Prometheus.</p>"},{"location":"advanced/metrics/#settings","title":"Settings","text":"<p>The following arguments can be used to configure the metrics (Available in kimup-operator and kimup-controller):</p> Flag Default Description --metrics false Enable metrics collection --metrics-port :9080 Port to expose metrics on --metrics-path /metrics Path to expose metrics on"},{"location":"advanced/metrics/#metrics_1","title":"Metrics","text":"<p>The following metrics are exposed:</p> Metrics Description kimup_actions_executed_duration The duration in seconds of action performed. kimup_actions_executed_error_total The total number of action performed with error. kimup_actions_executed_total The total number of action performed. kimup_events_triggerd_error_total The total number of events triggered with error. kimup_events_triggered_duration The duration in seconds of events triggered. kimup_events_triggered_total The total number of events triggered. kimup_mutator_patch_duration The duration in seconds of patch in admission controller. kimup_mutator_patch_error_total The total number of patch action performed with error. kimup_mutator_patch_total The total number of patch action performed. kimup_mutator_request_duration The duration in seconds of request in admission controller. kimup_mutator_request_error_total The total number of request received with error. kimup_mutator_request_total The total number of request received. kimup_registry_request_duration The duration in seconds of registry evaluated. kimup_registry_request_error_total The total number of registry evaluated with error. kimup_registry_request_total The total number of registry evaluated. kimup_rules_evaluated_duration The duration in seconds of rules evaluated. kimup_rules_evaluated_error_total The total number of rules evaluated with error. kimup_rules_evaluated_total The total number of rules evaluated. kimup_tags_available_sum The total number of tags available for an image. kimup_tags_request_duration The duration in seconds of the request to list tags. kimup_tags_request_error_total The total number returned an error when calling list tags. kimup_tags_request_total The total number of requests to list tags."},{"location":"crd/alertconfig/","title":"Custom Resource Definition <code>AlertConfig</code>","text":"<p>This is a custom resource definition for an alert configuration. It is used to setting up alerts for the image update. <code>AlertConfig</code> is a namespaced resource.</p>"},{"location":"crd/alertconfig/#basic-example","title":"Basic example","text":"<pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: AlertConfig\nmetadata:\n  name: demo\nspec:\n  discord:\n    webhookURL:\n      valueFrom:\n        secretKeyRef:\n          name: discord-secret\n          key: webhookURL\n</code></pre> <p>Each alert type has its own configuration. The <code>AlertConfig</code> resource defines the configuration for the alerts.</p>"},{"location":"crd/alertconfig/#configuration","title":"Configuration","text":"<p>Kimup Operator uses a dedicated kimup CRD to create and manage AlertConfig resources. The CRD allows various configurations to define the behaviour of the image. See docs.crds.dev for more information about the AlertConfig CRD.</p>"},{"location":"crd/image/","title":"Custom Resource Definition <code>Image</code>","text":"<p>This is a custom resource definition for an image. It is used to store information about an image. <code>Image</code> is a namespaced resource.</p>"},{"location":"crd/image/#basic-example","title":"Basic example","text":"<pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  name: image-sample\nspec:\n  image: alpine\n  baseTag: v1.0.0\n  triggers:\n    - &lt;trigger&gt;\n    - &lt;trigger&gt;\n  rules:\n    - &lt;rule&gt;\n    - &lt;rule&gt;\n</code></pre>"},{"location":"crd/image/#configuration","title":"Configuration","text":"<p>Kimup Operator uses a dedicated kimup CRD to create and manage image resources. The CRD allows various configurations to define the behaviour of the image. See docs.crds.dev for more information about the Image CRD.</p>"},{"location":"crd/image/#advanced","title":"Advanced","text":""},{"location":"crd/image/#use-authenticated-registry","title":"Use authenticated registry","text":"<p>Use the <code>imagePullSecrets</code> field to specify the name of the secret to use to authenticate with the registry.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  name: image-sample\nspec:\n    image: custom-registry.io/image\n    baseTag: v1.0.0\n    imagePullSecrets:\n        - name:  registry-local\n    triggers:\n        - &lt;trigger&gt;\n        - &lt;trigger&gt;\n    rules:\n        - &lt;rule&gt;\n        - &lt;rule&gt;\n</code></pre>"},{"location":"crd/image/#self-signed-certificate","title":"Self-signed certificate","text":"<p>Use the <code>insecureSkipTLSVerify</code> field to skip the verification of the TLS certificate.</p> <pre><code>kind: Image\nmetadata:\n  name: image-sample\nspec:\n    image: custom-registry.io/image\n    baseTag: v1.0.0\n    insecureSkipTLSVerify: true\n    triggers:\n        - &lt;trigger&gt;\n        - &lt;trigger&gt;\n    rules:\n        - &lt;rule&gt;\n        - &lt;rule&gt;\n</code></pre>"},{"location":"crd/image/#status","title":"Status","text":"<p>The following status can be set on an image:</p> Last-Sync state Description \"ActionError\" Status of the image when it is last sync error action. \"Error\" Status of the image when an error occurred. \"GetImageError\" Status of the image when it is last sync get error. \"GetRuleError\" Status of the image when it is last sync error get rule. \"PullSecretsError\" Status of the image when it is last sync error secrets. \"RegistryError\" Status of the image when it is last sync error registry. \"Scheduled\" Status of the image when it is last sync is scheduled. \"Success\" Status of the image when it is last sync success. \"TagsError\" Status of the image when it is last sync error tags."},{"location":"crd/kimup/","title":"Custom Resource Definition <code>Kimup</code>","text":"<p>This is a custom resource definition for a Kimup. It is used to manage a deployment of a kimup-controller.</p>"},{"location":"crd/kimup/#basic-example","title":"Basic example","text":"<pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Kimup\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n  name: kimup\nspec:\n  controller:\n    name: demo\n    logLevel: info\n</code></pre>"},{"location":"crd/kimup/#configuration","title":"Configuration","text":"<p>Kimup Operator uses a dedicated kimup CRD to create and manage kimup resources. The CRD allows various configurations to define the behaviour of the kimup controller. See docs.crds.dev for more information about the Kimup CRD.</p>"},{"location":"getting-started/howto/","title":"HowTo","text":""},{"location":"getting-started/howto/#how-to-use","title":"How to Use","text":"<p>1 - Create an <code>Image</code> resource:</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\n  namespace: default\nspec:\n  image: traefik/whoami\n  baseTag: v1.9.0\n  triggers:\n    - type: crontab\n      value: \"00 00 */12 * * *\"\n  rules:\n    - name: Automatic update semver minor\n      type: semver-minor\n      actions:\n        - type: apply\n</code></pre> <p>In this example the image <code>traefik/whoami</code> will be updated every 12 hours with the latest minor version.</p> <p>2 - Apply the <code>Image</code> resource:</p> <pre><code>kubectl apply -f image.yaml\n</code></pre> <p>3 - Check the Image TAG:</p> <pre><code>kubectl get image demo\n\nNAME             IMAGE            TAG       LAST-RESULT   LAST-SYNC\ndemo             traefik/whoami\n</code></pre> <p>But you can force the update by running the following command:</p> <pre><code>kubectl annotate image demo kimup.cloudavenue.io/action=refresh\n</code></pre> <p>The Image TAG is now updated:</p> <pre><code>kubectl get image demo\n\nNAME             IMAGE            TAG       LAST-RESULT   LAST-SYNC\ndemo             traefik/whoami   v1.10.0   Success       15s\n</code></pre> <p>4 - Make a deployment with the image:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: whoami\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: whoami\n  template:\n    metadata:\n      annotations:\n        kimup.cloudavenue.io/enabled: \"true\"\n      labels:\n        app: whoami\n    spec:\n      containers:\n        - name: whoami\n          image: traefik/whoami\n</code></pre> <p>5 - Apply the deployment:</p> <pre><code>kubectl apply -f deployment.yaml\n</code></pre> <p>Now the deployment is running with the image <code>traefik/whoami:v1.10.0</code> define by your rules in the CRD <code>Image</code>.</p>"},{"location":"getting-started/install/","title":"Install Kimup Operator","text":"<p>Kimup Operator is a Kubernetes operator used to manage images and their lifecycle, manage kimup-controller deployments. The operator is required for the functioning of the Kimup.</p> <p>Resources managed by Kimup Operator are:</p> <ul> <li>Image</li> <li>AlertConfig</li> <li>Kimup</li> </ul>"},{"location":"getting-started/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster with a version &gt;= 1.28</li> <li><code>kubectl</code> with kustomize installed and configured to connect to your cluster</li> <li><code>cert-manager</code> installed in your cluster (See cert-manager documentation)</li> </ul>"},{"location":"getting-started/install/#installation","title":"Installation","text":""},{"location":"getting-started/install/#install-custom-resource-definitions","title":"Install custom resource definitions","text":"<pre><code>kubectl apply -k \"https://github.com/orange-cloudavenue/kube-image-updater/manifests/crd/?ref=\"\n</code></pre>"},{"location":"getting-started/install/#install-kimup-operator_1","title":"Install Kimup Operator","text":"<pre><code>kubectl apply -k \"https://github.com/orange-cloudavenue/kube-image-updater/manifests/operator/?ref=\"\n</code></pre> <p>By default, Kimup Operator is installed in the <code>kimup-operator</code> namespace.</p> <p>Namespace</p> <p>For the moment only the <code>kimup-operator</code> namespace is supported.</p>"},{"location":"getting-started/install/#deploy-kimup-controller","title":"Deploy <code>kimup-controller</code>","text":"<p>For deploying <code>kimup-controller</code>, create a <code>Kimup</code> resource in the <code>kimup-operator</code> namespace:</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Kimup\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n  name: kimup\n  namespace: kimup-operator\nspec:\n  name: demo\n  logLevel: info\n</code></pre> <pre><code>kubectl apply -f kimup.yaml\n</code></pre> <pre><code>kubectl get kimup\n\nNAME    STATE\nkimup   ready\n</code></pre>"},{"location":"getting-started/scope/","title":"Scope","text":""},{"location":"getting-started/scope/#overview","title":"Overview","text":"<p>Kimup operator allow you to manage at what level it monitors to apply or not the tag when creating a pod.</p> <p>Scope is defined by the annotation <code>kimup.cloudavenue.io/enabled</code> on the namespace or the pod.</p>"},{"location":"getting-started/scope/#logical","title":"Logical","text":""},{"location":"getting-started/scope/#namespace","title":"Namespace","text":"<p>When the annotation <code>kimup.cloudavenue.io/enabled: \"true\"</code> is set on a namespace, the operator will only apply the tag on the pods that are created in this namespace.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n</code></pre>"},{"location":"getting-started/scope/#pod","title":"Pod","text":"<p>When the annotation <code>kimup.cloudavenue.io/enabled: \"true\"</code> is set on a pod, the operator will only apply the tag on this pod.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: your-pod\n  namespace: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"true\"\n</code></pre>"},{"location":"getting-started/scope/#ignore-for-a-pod","title":"Ignore for a pod","text":"<p>When the annotation <code>kimup.cloudavenue.io/enabled: \"false\"</code> is set on a pod, the operator will ignore this pod even if the namespace is enabled.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: your-pod\n  namespace: your-env\n  annotations:\n    kimup.cloudavenue.io/enabled: \"false\"\n</code></pre>"},{"location":"rules/always/","title":"Always","text":"<p>Only for testing purpose</p> <p>The <code>always</code> trigger is only for testing purpose and should not be used in production.</p> <p>The <code>always</code> rule allows you to define a rule that will be executed every time the refresh is triggered.</p>"},{"location":"rules/always/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>always</code> rule.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Always update\n      type: always\n      actions:\n        - [...]\n</code></pre>"},{"location":"rules/calver/","title":"Calendar Versioning","text":"<p>The <code>calver</code> rule allows you to define a rule that will be executed when the image is updated with a new calver version. It follows the Calendar Versioning specification. A lot of options are available to match the version you want to update.</p> <p>The format of the version following this logic regex. <pre><code>^([0-9]{4}|[0-9]{2})(\\.[0-9]{1,2})?(\\.[0-9]{1,2})?(-([0-9A-Za-z\\-]+(\\.[0-9A-Za-z\\-]+)*))?$\n</code></pre></p> <p>Format allowed: <pre><code># YYYY.MM.XX\n2024\n2024.01\n2024.01.01\n\n# YY.MM.XX\n24\n24.01\n\n# YY.M.X\n24.1\n24.1.1\n\n2024.01.01-dev.1\n</code></pre></p> <ul> <li><code>calver-major</code>: Update the image with the latest major version.</li> <li><code>calver-minor</code>: Update the image with the latest minor version.</li> <li><code>calver-patch</code>: Update the image with the latest patch version.</li> <li><code>calver-prerelease</code>: Update the image with the latest prerelease version.</li> </ul> <p><code>calver-major</code> is the most restrictive and will only update the image when the major version is updated calver documentation. Most of time the major is a year date (eg: <code>2024</code>, <code>2025</code>, <code>2026</code>, ...). calver rule<pre><code>version: 2024.0.0\nMatch: &gt;=2025.*.* # (1)\n</code></pre></p> <ol> <li> For more information about the calver range, you can check the calver documentation.</li> </ol> <p><code>calver-minor</code> is less restrictive and will update the image when the minor version is updated. Most of time the minor is a month date (eg: <code>2024.01</code>, <code>2024.02</code>, <code>2024.03</code>, ...). calver rule<pre><code>version: 2024.0.0\nMatch: &gt;=2024.1.* and &lt;2025.0.0 # (1)\n</code></pre></p> <ol> <li> For more information about the calver range, you can check the calver documentation.</li> </ol> <p><code>calver-patch</code> is the least restrictive and will update the image when the patch version is updated. Most of time the patch is a day date (eg: <code>2024.01.01</code>, <code>2024.01.02</code>, <code>2024.01.03</code>, ...). calver rule<pre><code>version: 2024.0.0\nMatch: &gt;=2024.0.1 and &lt; 2024.1.0 # (1)\n</code></pre></p> <p><code>calver-prerelease</code> is the least restrictive and will update the image when the prerelease version is updated. The prerelease version is the part after the <code>-xxx.</code> in the version. It's an incremental number. (eg: <code>2024.0.0-dev.1</code>, <code>2024.0.0-dev.2</code>, <code>2024.0.0-dev.3</code>,...). calver rule<pre><code>version: 2024.0.0-dev.0\nMatch: &gt;=2024.0.0-dev.1\n</code></pre></p>"},{"location":"rules/calver/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>calver</code> rule.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: image-sample-with-auth\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v2024.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Notify when calver major is detected\n      type: calver-major\n      actions:\n        - type: alert-xxx\n          [...]\n    - name: Automatic update calver minor\n      type: calver-minor\n      actions:\n        - type: apply\n    - name: Automatic update calver patch\n      type: calver-patch\n      actions:\n        - type: apply\n</code></pre>"},{"location":"rules/regex/","title":"Regex","text":"<p>The <code>regex</code> rule allows you to define a rule that will be executed when the image is updated with a new version that matches a regular expression. Regex is compatible with Golang Regex format. Use the great regex101.com website to test your regular expression.</p>"},{"location":"rules/regex/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>regex</code> rule.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: image-sample-with-auth\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Automatic apply on dev version\n      type: regex\n      # Match v1.2.3-dev1 version\n      value: \"^v?[0-9].[0-9].[0-9]-dev[0-9]$\" # (1)\n      actions:\n        - type: apply\n</code></pre> <ol> <li>For more information about this regular expression, you can check the regex101.com/r/prt9tw/1.</li> </ol>"},{"location":"rules/semver/","title":"Semantic Versioning (semver)","text":"<p>The <code>semver</code> rule allows you to define a rule that will be executed when the image is updated with a new semver version. It follows the Semantic Versioning specification. A lot of options are available to match the version you want to update.</p> <ul> <li><code>semver-major</code>: Update the image with the latest major version.</li> <li><code>semver-minor</code>: Update the image with the latest minor version.</li> <li><code>semver-patch</code>: Update the image with the latest patch version.</li> </ul> <p><code>semver-major</code> is the most restrictive and will only update the image when the major version is updated. Semver rule<pre><code>version: 1.0.0\nMatch: &gt;=2.*.* # (1)\n</code></pre></p> <ol> <li> For more information about the semver range, you can check the semver documentation.</li> </ol> <p><code>semver-minor</code> is less restrictive and will update the image when the minor version is updated. Semver rule<pre><code>version: 1.0.0\nMatch: &gt;=1.1.* &lt;2 # (1)\n</code></pre></p> <ol> <li> For more information about the semver range, you can check the semver documentation.</li> </ol> <p><code>semver-patch</code> is the least restrictive and will update the image when the patch version is updated. Semver rule<pre><code>version: 1.0.0\nMatch: &gt;=1.0.1 &lt;1.1.0 # (1)\n</code></pre></p> <ol> <li> For more information about the semver range, you can check the semver documentation.</li> </ol>"},{"location":"rules/semver/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>semver</code> rule.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: image-sample-with-auth\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - [...]\n  rules:\n    - name: Notify when semver major is detected\n      type: semver-major\n      actions:\n        - type: alert-xxx\n          [...]\n    - name: Automatic update semver minor\n      type: semver-minor\n      actions:\n        - type: apply\n    - name: Automatic update semver patch\n      type: semver-patch\n      actions:\n        - type: apply\n</code></pre>"},{"location":"triggers/annotation/","title":"Annotation","text":"<p>The <code>annotation</code> trigger allows you to define a Kubernetes annotation to schedule the image refresh.</p>"},{"location":"triggers/annotation/#who-to-use","title":"Who to use","text":"<pre><code>kubectl annotate image demo kimup.cloudavenue.io/action=refresh\n</code></pre> <p>The <code>demo</code> image will be triggered instantly and launch the rule defined in the <code>rules</code> section.</p>"},{"location":"triggers/crontab/","title":"Crontab","text":"<p>The <code>crontab</code> trigger allows you to define a cron expression to schedule the image refresh.</p> <p>The cron expression is a string representing a set of times, using 6 fields separated by white spaces. The fields represent:</p> <ol> <li>Seconds (0-59)</li> <li>Minutes (0-59)</li> <li>Hours (0-23)</li> <li>Day of month (1-31)</li> <li>Month (1-12)</li> <li>Day of week (0-6) (Sunday to Saturday)</li> </ol> <p><code>*</code> is a wildcard character that matches all values.</p> <p>Examples:</p> <ul> <li><code>00 00 */12 * * *</code> will trigger the image every 12 hours.</li> <li><code>00 00 00 * * *</code> will trigger the image every day at midnight.</li> <li><code>00 00 00 1 * *</code> will trigger the image every first day of the month at midnight.</li> <li><code>00 00 00 * * 1</code> will trigger the image every Monday at midnight.</li> </ul>"},{"location":"triggers/crontab/#who-to-use","title":"Who to use","text":"<p>Create an <code>Image</code> resource with the <code>crontab</code> trigger.</p> <p>Every 12 hours the image will execute rule defined in the <code>rules</code> section.</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\nspec:\n  image: registry.127.0.0.1.nip.io/demo\n  baseTag: v0.0.4\n  triggers:\n    - type: crontab\n      value: \"00 00 */12 * * *\"\n  rules:\n    - [...]\n</code></pre>"}]}