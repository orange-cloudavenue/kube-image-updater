{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Project is in early development.</p> <p>This project is in early development and is not yet ready for production use. You are welcome to try it out and provide feedback, but be aware that the API may change at any time.</p> <p>kube-image-updater (A.K.A. kimup, which is pronounced /kim up/) is a tool that helps you to update the image of a Kubernetes Deployment, StatefulSet, DaemonSet, or CronJob. It can be used to update the image of a single resource or multiple resources at once.</p> <p>kimup is designed to be simple to use and easy to deploy. It is an kubernetes operator with custom resource definition (CRD) that allows you to define the image update strategy and schedule.</p> <p>The project is composed of 3 main components: - kimup-operator: The main component that watches the <code>Image</code> resources and updates. - kimup: The component that updates the image of the target resources. - kimup-webhook: The component that patch resource creation with rules defined in <code>Image</code> resource.</p> <p>Basic example of usage:</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\n  namespace: default\nspec:\n  image: ghcr.io/orange-cloudavenue/kube-image-updater\n  baseTag: v0.0.19\n  triggers:\n    - type: crontab\n      value: \"00 00 */12 * * *\"\n  rules:\n    - name: Automatic update semver minor\n      type: semver-minor\n      actions:\n        - type: apply\n</code></pre> <p>The <code>Image</code> resource defines the image to update, the base tag, the triggers, and the rules. In this example, the image <code>ghcr.io/orange-cloudavenue/kube-image-updater</code> will be updated every 12 hours with the latest minor version.</p> <p>It is structured around the following concepts:</p> <ul> <li>Triggers: define when the image should be updated. (Multiple triggers can be defined)</li> <li>Rules: define how the image should be updated. (Multiple rules can be defined)</li> <li>Actions: define what should be done after the image is updated (rule matched). (Multiple actions can be defined)</li> </ul>"},{"location":"howto/","title":"Howto","text":""},{"location":"howto/#howto","title":"HowTo","text":""},{"location":"howto/#how-to-use","title":"How to Use","text":"<p>1 - Create an <code>Image</code> resource:</p> <pre><code>apiVersion: kimup.cloudavenue.io/v1alpha1\nkind: Image\nmetadata:\n  labels:\n    app.kubernetes.io/name: kube-image-updater\n    app.kubernetes.io/managed-by: kustomize\n  name: demo\n  namespace: default\nspec:\n  image: ghcr.io/orange-cloudavenue/kube-image-updater\n  baseTag: v0.0.19\n  triggers:\n    - type: crontab\n      value: \"00 00 */12 * * *\"\n  rules:\n    - name: Automatic update semver minor\n      type: semver-minor\n      actions:\n        - type: apply\n</code></pre> <p>2 - Apply the <code>Image</code> resource:</p> <p></p><pre><code>kubectl apply -f image.yaml\n</code></pre> In this example the image <code>ghcr.io/orange-cloudavenue/kube-image-updater</code> will be updated every 12 hours with the latest minor version. <p>3 - Check the Image TAG:</p> <p></p><pre><code>kubectl get image demo'\n\nNAME   IMAGE                  TAG\ndemo   ghcr.io/azrod/golink   \n</code></pre> But you can force the update by running the following command: <pre><code>kubectl annotate image demo kimup.cloudavenue.io/action=refresh\n</code></pre> <p>The Image TAG is now updated:</p> <pre><code>NAME   IMAGE                  TAG\ndemo   ghcr.io/azrod/golink   v0.1.0\n</code></pre> <p>4 - Make a deployment with the image:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: golink\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: golink\n  template:\n    metadata:\n      labels:\n        app: golink\n    spec:\n      containers:\n        - name: golink\n          image: ghcr.io/azrod/golink\n          ports:\n            - containerPort: 8080\n</code></pre> <p>5 - Apply the deployment:</p> <pre><code>kubectl apply -f deployment.yaml\n</code></pre> <p>Now the deployment is running with the image <code>ghcr.io/azrod/golink:v0.1.0</code> define by your rules in the CRD <code>Image</code>.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install","title":"Install","text":""},{"location":"install/#how-to-install-development","title":"How to Install (Development...)","text":"<p>1 - Install the CRD:</p> <pre><code>kubectl apply -f config/crd/bases/kimup.cloudavenue.io_images.yaml\n````\n\n2 - Start all services:\n\nFor Operator\n```bash\nmake run-operator\n</code></pre> <p>For Webhook </p><pre><code>go run ./cmd/webhook --insideCluster=false\n</code></pre> <p>For kimup </p><pre><code>go run ./cmd/kimup --insideCluster=false\n</code></pre>"}]}